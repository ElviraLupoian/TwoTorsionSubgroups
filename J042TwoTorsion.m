// This is the MAGMA code used to compute the 2-torsion subgroup of the modular Jacobin J0(42) using the quadritangent planes computed using X042Quadritangents.m


// we begin by computing the 2-torsion part of the cuspidor subgroup 


Z<u> := PolynomialRing(Integers()) ;


f :=  2713*u^16 + 9264*u^15 + 24252*u^14 - 1352*u^13 - 270446*u^12 - 739224*u^11 - 599968*u^10 + 1502208*u^9 + 
6136803*u^8 + 10670696*u^7 + 11231488*u^6 + 7603968*u^5 + 3052898*u^4 + 591416*u^3 + 141500*u^2 + 210760*u + 154057;
F := f ;

// all our planes will be defined over the following number field K 

K := NumberField(f) ;
PP := PrimesUpTo(150,K) ;
P := PP[11] ;    // a prime ideal of norm 11^2 which we will use in our reduction map  

OK := Integers(K) ;

// we use the model of the curve and cusps given by Ozman-Siksek

RR<[x]> := PolynomialRing(Rationals(),5) ;
f1 := x[1]*x[3] - x[2]^2 + x[3]*x[4] ;
f2 := x[1]*x[5] - x[2]*x[5] - x[3]^2 + x[4]*x[5] - x[5]^2 ;
f3 := x[1]*x[4] - x[2]*x[3] + x[2]*x[4] - x[3]^2 + x[3]*x[4] + x[3]*x[5] - x[4]^2 - 2*x[4]*x[5] ;
P4 := ProjectiveSpace(RR) ;
X := Curve(P4, [f1,f2,f3] ) ;

// we compute the F_11^2 points of the Jacobian of X0(42) 

F11,pi := ResidueClassField(P) ;
X11 := ChangeRing(X,F11) ;
Cl11,phi,psi := ClassGroup(X11) ;
Z := FreeAbelianGroup(1) ;
degr := hom<Cl11 -> Z | [ Degree(phi(g)) : g in OrderedGenerators(Cl11) ] > ;
J11 := Kernel(degr) ;

// the cusps of the modular curve on this model are as follows:

C := [ [2,-1,1, -1,1], [ 2,2, 1, 2, 1], [7, 4, 2, 1, 2] , [1,-2, 2, 1,2 ] , [3,0,0,-1,2] , 
[1,0,0,0,1], [1 ,0,0,1, 0] , [1,0,0,0,0] ];

C := [ [Integers() ! a : a in b ] : b in C ];
C11 := [ [ pi(b) : b in a ] : a in C ] ;
C11 := [ X11 ! a : a in C11 ];
PC11 := [ Place(s) : s in C11 ] ;
divs2 := [ PC11[i] - PC11[1] : i in [2..#PC11] ] ;

H5 := [ psi(divs2[i]) : i in [1..#divs2] ] ;
ZN := FreeAbelianGroup(#H5) ;
Hh := hom< ZN -> J11 | [ a : a in H5] >;

// Since reduction modulo P is injective on torsion,  the image of the above map is the subgroup of the Jacobian generated by the cusps 

print "The Cuspidal Subgroup of J0(42) is";

Image(Hh);

// we take the 2-torsion part of the above group 

t1 := -divs2[1] + 2*divs2[2] -2*divs2[4] -2*divs2[5] ;
t2 := 2*divs2[1] + 3*divs2[2] + divs2[4] + divs2[5] ;
t3 := - divs2[1] - 2*divs2[2] - divs2[3] - divs2[4] + 10*divs2[5] ;
t3 := 6*t3;
t4 := - divs2[1] + 9*divs2[2] - divs2[3] - 9*divs2[4] + divs2[5] ;
t4 := 24*t4 ;

Dd := [ t1, t2, t3, t4] ;
H55 := [ psi(a) : a in Dd ];


ZN := FreeAbelianGroup(#H55) ;
Hh := hom< ZN -> J11 | [ a : a in H55] >;

print "and the thus the 2-torsion part of the cuspidor subgroup is:";

CH2 := Image(Hh);
CH2;

print "All points of the above subgroup are rational since all the cusps of our curve are rational points";

// we now compute the two-torsion generated by the Quadritangents computed 

// the coefficient defining the planes in our first orbit are computed as follows

Z<u> := PolynomialRing(Integers()) ;
f := u^8 + 14*u^7 + 151*u^6 - 396*u^5 + 283*u^4 - 1730*u^3 + 3201*u^2 - 1440*u +2284 ;
R := Roots(f,K) ;
Z<u> := PolynomialRing(K) ; 
S1 := (1/301100972656)*(39380331*u^7 + 442881623*u^6 + 4027975134*u^5 - 37845583334*u^4 - 12023416509*u^3 - 80118862717*u^2 - 49248922084*u + 241405142628) ;
S2 := (-1/301100972656)*(52272255*u^7 + 716826167*u^6 + 7618567014*u^5 - 24269489250*u^4 + 8461415807*u^3 - 144514109641*u^2 + 341498511372*u- 30420302668 ) ;
S3 := (-1/301100972656)*( 16239354*u^7 + 285678727*u^6 + 3306671724*u^5 + 3184311718*u^4 - 7648219606*u^3 - 17837849633*u^2 + 78572314624*u - 372802926204);
R1 := R ;
coeff := [ [ R[i,1], Evaluate(S1, R[i,1]), Evaluate(S2,R[i,1]), Evaluate(S3, R[i,1]) ] : i in [1..8] ] ;
coeff := [ [-1] cat a : a in coeff ] ;

// we clear denominators of our coefficients to ensure all planes have defining equations over the ring of integers of K 

C := [] ;
for i in [1..8] do ;
a1 := coeff[i] ;
a1 := [K ! b  : b in a1 ] ;
da2 := [ Denominator(b) : b in a1 ] ;
lda2 := [ Integers() ! a : a in da2];
L := Lcm(lda2) ;
a3 := [ L*a : a in a1] ;
C[i] := a3 ;
end for ;

CO := [ [ OK ! a : a in b] : b in C ];

// we divide by common factors of our coefficients 

Ci := [] ;
for i in [ 1..#CO] do ;
CC := CO[i] ;
C := [ [ Integers() ! a : a in Eltseq(b) ] : b in CC ];
GCi := [ Gcd(a) : a in C ] ;
Ci[i] := GCD(GCi) ;
end for ;


COO := [] ;
for i in [1..#CO] do ;
a := CO[i] ;
ai := [ [ Integers() ! d : d in Eltseq(b)] : b in a ]; 
d  := Ci[i] ;
aid :=  [ [ 1/d*aa : aa in b ] : b in ai] ;
COO[i] := aid ;
end for ;


COK := [ [ OK ! a : a in b ] : b in COO ];
C := COK ;
CO := C ;

// the defining polynomials of the planes (in the first orbit) are as follows: 

ZX<[X]> := PolynomialRing(OK,5) ;
p := [] ;
for i in [1..8] do ;
p[i] := &+[CO[i][j]*X[j] : j in [1..5] ] ;
end for ; 
l1 := -X[1] - X[3] + 2*X[4] + 2*X[5] ;
QT := [ l1 ] cat p ;

// we reduce these planes modulo P 

FX11 := FunctionField(X11) ;
CQT := [ [MonomialCoefficient(a,X[1]),  MonomialCoefficient(a,X[2]) , 
MonomialCoefficient(a,X[3]) , MonomialCoefficient(a,X[4]), 
MonomialCoefficient(a,X[5])] : a in QT ] ;

F11QT := [ [pi(s) : s in a ] : a in CQT ];
ZU<[U] > := PolynomialRing(F11,5) ;
F11QT := [ a[1]*U[1] + a[2]*U[2] + a[3]*U[3] + a[4]*U[4] + a[5]*U[5] : a in F11QT ];
F11QTT := [ Evaluate(a, [ FX11.1, FX11.2, FX11.3, FX11.4, 1] ) : a in F11QT ] ; 

D := [ Divisor(F11QTT[i]/ F11QTT[1]) : i in [2..9] ] ;


// we form the divisors defined by the quadritangent planes 

DDd := [ Decomposition(a) : a in D ];
DDd1 := [ [ a[i,2] : i in [1..#a] ] :  a in DDd ];
DDd1 := [ [ 1/2*b : b in a ] : a in DDd1 ];
DDd1 := [ [ Integers() ! b : b in a ] : a in DDd1 ];
DDd2 := [ [ a[i,1] : i in [1..#a ] ] : a in DDd ];
divs := [ [ DDd1[i][j]*DDd2[i][j] : j in [1..#DDd1[i] ]  ] : i in [1..#DDd1] ];
divs := [ &+a :a in divs ];

H6 := [ psi(a) : a in divs ];




// we repeat the above using the planes in the second orbit 

Z<u> := PolynomialRing(Integers()) ;
f := 23*u^8 + 78*u^7 + 135*u^6 + 146*u^5 + 236*u^4 + 322*u^3 + 239*u^2 + 94*u + 23 ;
R := Roots(f,K) ;
Z<u> := PolynomialRing(K) ;
R2 := R ;
S1 := (1/6324)*(10258*u^7 + 27083*u^6 + 40152*u^5 + 34112*u^4 + 75578*u^3 + 80920*u^2 + 41542*u + 5979) ;

S2 := (-1/4743)*(4324*u^7 + 9535*u^6 + 12034*u^5 + 6080*u^4 + 22416*u^3 + 14876*u^2 + 3588*u - 7468) ;

S3 := (-1/9486)*( 3404*u^7 + 10601*u^6 + 16874*u^5 + 17098*u^4 + 28680*u^3 +37276*u^2 + 24084*u - 7931) ;

coeff := [ [-1, R[i,1], Evaluate(S1, R[i,1]), Evaluate(S2,R[i,1]), Evaluate(S3, R[i,1]) ] : i in [1..8] ] ;

C := [] ;

for i in [1..8] do ;
a1 := coeff[i] ;
a1 := [K ! b  : b in a1 ] ;
da2 := [ Denominator(b) : b in a1 ] ;
lda2 := [ Integers() ! a : a in da2];
L := Lcm(lda2) ;
a3 := [ L*a : a in a1] ;
C[i] := a3 ;
end for ;
 
CO := [ [ OK ! a : a in b] : b in C ];
Ci := [] ;

for i in [ 1..#CO] do ;
CC := CO[i] ;
C := [ [ Integers() ! a : a in Eltseq(b) ] : b in CC ];
GCi := [ Gcd(a) : a in C ] ;
Ci[i] := GCD(GCi) ;
end for ;

COO := [] ;

for i in [1..#CO] do ;
a := CO[i] ;
ai := [ [ Integers() ! d : d in Eltseq(b)] : b in a ]; 
d  := Ci[i] ;
aid :=  [ [ 1/d*aa : aa in b ] : b in ai] ;
COO[i] := aid ;
end for ;

COK := [ [ OK ! a : a in b ] : b in COO ];
C := COK ;
CO := C ;
ZX<[X]> := PolynomialRing(OK,5) ;
p := [] ;

for i in [1..8] do ;
p[i] := &+[CO[i][j]*X[j] : j in [1..5] ] ;
end for ; 

l1 := -X[1] - X[3] + 2*X[4] + 2*X[5] ;
QT := [ l1 ] cat p ;
FX11 := FunctionField(X11) ;
CQT := [ [MonomialCoefficient(a,X[1]),  MonomialCoefficient(a,X[2]) , 
MonomialCoefficient(a,X[3]) , MonomialCoefficient(a,X[4]), MonomialCoefficient(a,X[5])] : a in QT ] ;

F11QT := [ [pi(s) : s in a ] : a in CQT ];
ZU<[U] > := PolynomialRing(F11,5) ;
F11QT := [ a[1]*U[1] + a[2]*U[2] + a[3]*U[3] + a[4]*U[4] + a[5]*U[5] : a in F11QT ];
F11QTT := [ Evaluate(a, [ FX11.1, FX11.2, FX11.3, FX11.4, 1] ) : a in F11QT ] ; 
D := [ Divisor(F11QTT[i]/ F11QTT[1]) : i in [2..9] ] ;

DDd := [ Decomposition(a) : a in D ];
DDd1 := [ [ a[i,2] : i in [1..#a] ] :  a in DDd ];
DDd1 := [ [ 1/2*b : b in a ] : a in DDd1 ];
DDd1 := [ [ Integers() ! b : b in a ] : a in DDd1 ];
DDd2 := [ [ a[i,1] : i in [1..#a ] ] : a in DDd ];
divs := [ [ DDd1[i][j]*DDd2[i][j] : j in [1..#DDd1[i] ]  ] : i in [1..#DDd1]];
divs := [ &+a :a in divs ];
H8 := [ psi(a) : a in divs ];      


// we compute the 2-torsion subgroup generated by the cuspidal divisors of order and the quadritangent planes we computed

 H := H55 cat H6 cat H8;
ZN := FreeAbelianGroup(#H) ;
hh := hom< ZN -> J11 | [ a : a in H ] >;
ihh := Image(hh) ;


print "The 2-torsion subgroup generated by cuspidal divisors of order 2 and the quadritangents computed is:";

ihh;


assert Order(ihh) eq 2^10;

print "Thus we have compute the entire 2-torsion subgroup of the Jacobian of X0(42)";

// we take Galois invariant of the above group to compute the rational 2-torsion subgroup

// We find that the automorphism group of K is generated by 3 elements 

A :=  Automorphisms(K) ;
s2 := A[2] ;
s3 := A[3] ;
s5 := A[5] ;
a := s2;
b := s3 ;
c := s5;

// The action of each generator on the roots of the polynomials defining our orbits of quadritangents, and hence on the 2-torsion,  can be computed directly.

// The action of a on the generators of the above group is represented by the following 

cpt1 := [ ZN.1 , ZN.2, ZN.3, ZN.4, ZN.10, ZN.11, ZN.9, ZN.12, ZN.7, ZN.5, ZN.6, ZN.8, ZN.16, ZN.15, ZN.14, ZN.13, ZN.19, ZN.20, ZN.17, ZN.18];

// and hence we can find the fixed points of this generator as follows 
conj1 := hom< ZN -> ZN | cpt1>;
mu := hom< ZN -> J11 | [ hh(ZN.i) - hh(conj1(ZN.i)) : i in [1..20]]>;
ker1 := Kernel(mu);
imKer1 := sub<J11 | [hh(k) : k in Generators(ker1)]>;


// The action of b is represented by the following vector.

cpt2 := [ ZN.1, ZN.2, ZN.3, ZN.4, ZN.9, ZN.10, ZN.12, ZN.11, ZN.8, ZN.7, ZN.5, ZN.6, ZN.14, ZN.16, ZN.13, ZN.15, ZN.20, ZN.17, ZN.18, ZN.19];

// and the fixed points of this generator are:
conj2 := hom< ZN -> ZN | cpt2>;
mu := hom< ZN -> J11 | [ hh(ZN.i) - hh(conj2(ZN.i)) : i in [1..20]]>;
ker2 := Kernel(mu);
imKer2 := sub<J11 | [hh(k) : k in Generators(ker2)]>;



// The action of c is represented by the following vector.

cpt3 := [ ZN.1, ZN.2, ZN.3, ZN.4, ZN.12, ZN.11, ZN.9, ZN.10, ZN.7, ZN.8, ZN.6, ZN.5, ZN.17, ZN.18, ZN.20, ZN.19, ZN.13, ZN.14, ZN.16, ZN.15];

// and the fixed points of this generator are:


conj3 := hom< ZN -> ZN | cpt3>;
mu := hom< ZN -> J11 | [ hh(ZN.i) - hh(conj3(ZN.i)) : i in [1..20]]>;
ker3 := Kernel(mu);
imKer3 := sub<J11 | [hh(k) : k in Generators(ker3)]>;


// Hence the rational two-torsion subgroup is the intersection of the 3 groups 

RatTors := imKer1 meet imKer2 meet imKer3;

print " The rational two-torsion subgroup of the Jacobian of X0(42) is:";

RatTors;

// we verify that this is equal to the 2-torsion part of the cuspidal subgroup

assert Order(RatTors) eq #CH2;

print "as this has the same order as the 2-torsion of the cuspidal subgroup, this verifies the Generalised Ogg conjecture for N = 42.";

